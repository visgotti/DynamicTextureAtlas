var DTA=function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(1);e.Atlas=i.default;const n=s(2);e.MultiAtlas=n.default},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t,e,s){this.mappedRects={},this.expectedMinTextureLength=s,this.maxAtlasWidth=t,this.maxAtlasHeight=e,this.openRects=[{x:0,y:0,width:this.maxAtlasWidth,height:this.maxAtlasHeight}]}reset(){this.openRects=[{x:0,y:0,width:this.maxAtlasWidth,height:this.maxAtlasHeight}],this.mappedRects={}}hasOpenRects(){return this.openRects.length>0}addRect(t,e,s){if(0===this.openRects.length)return!1;if(t in this.mappedRects)throw new Error("Id already mapped");let i=this.getOpenRect(e,s);if(!i.found)return!1;const{rect:n,index:a,rotated:r}=i,{x:h,y:c}=n;this.divideRectAndUpdateOpenRects(a,e,s);const l={x:h,y:c,width:e,height:s};return this.mappedRects[t]=l,l}divideRectAndUpdateOpenRects(t,e,s){const i=this.openRects[t];if(this.openRects.splice(t,1),i.width>e){let t=i.x+e,n=i.y,a=i.width-e,r=s;a>=this.expectedMinTextureLength&&r>=this.expectedMinTextureLength&&this.openRects.push({x:t,y:n,width:a,height:r})}if(i.height>s){let t=i.x,e=i.y+s,n=i.width,a=i.height-s;n>=this.expectedMinTextureLength&&a>=this.expectedMinTextureLength&&this.openRects.push({x:t,y:e,width:n,height:a})}return[]}getOpenRect(t,e){let s=this.openRects.length;for(;s--;){let i=this.openRects[s];if(t<=i.width&&e<=i.height)return{found:!0,rect:i,index:s,rotated:!1};t<=i.height&&i.width}return{found:!1}}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0);e.default=class{constructor(t,e,s){this.mappedRects={},this.maxAtlasWidth=t,this.maxAtlasHeight=e,this.expectedMinTextureLength=s,this.atlasses=[new i.Atlas(t,e,s)],this.availableAtlasses=[this.atlasses[0]]}addRect(t,e,s){let i=null;for(let n=0;n<this.availableAtlasses.length;n++){const a=n,r=this.availableAtlasses[n];if(i=r.addRect(t,e,s)){r.hasOpenRects()||(this.availableAtlasses.splice(n,1),n--),this.mappedRects[t]={atlasIndex:a,rect:i};break}}if(!i){const n=this.atlasFactory(),a=this.atlasses.push(n)-1;this.availableAtlasses.push(n),i=n.addRect(t,e,s),this.mappedRects[t]={atlasIndex:a,rect:i}}return this.mappedRects[t]}atlasFactory(){return new i.Atlas(this.maxAtlasWidth,this.maxAtlasHeight,this.expectedMinTextureLength)}}}]);