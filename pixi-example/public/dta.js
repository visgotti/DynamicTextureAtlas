var DTA=function(e){var t={};function s(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}return s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(i,r,function(t){return e[t]}.bind(null,r));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(1);t.Atlas=i.default;const r=s(2);t.MultiAtlas=r.default;const n=s(3);t.RenderedAtlas=n.default},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,s){this.mappedRects={},this.expectedMinTextureLength=s,this.maxAtlasWidth=e,this.maxAtlasHeight=t,this.openRects=[{x:0,y:0,width:this.maxAtlasWidth,height:this.maxAtlasHeight}]}reset(){this.openRects=[{x:0,y:0,width:this.maxAtlasWidth,height:this.maxAtlasHeight}],this.mappedRects={}}hasOpenRects(){return this.openRects.length>0}addRect(e,t,s){if(0===this.openRects.length)return!1;if(e in this.mappedRects)throw new Error("Id already mapped");let i=this.getOpenRect(t,s);if(!i.found)return!1;const{rect:r,index:n,rotated:a}=i,{x:h,y:d}=r;this.divideRectAndUpdateOpenRects(n,t,s);const c={x:h,y:d,width:t,height:s};return this.mappedRects[e]=c,c}divideRectAndUpdateOpenRects(e,t,s){const i=this.openRects[e];if(this.openRects.splice(e,1),i.width>t){let e=i.x+t,r=i.y,n=i.width-t,a=s;n>=this.expectedMinTextureLength&&a>=this.expectedMinTextureLength&&this.openRects.push({x:e,y:r,width:n,height:a})}if(i.height>s){let e=i.x,t=i.y+s,r=i.width,n=i.height-s;r>=this.expectedMinTextureLength&&n>=this.expectedMinTextureLength&&this.openRects.push({x:e,y:t,width:r,height:n})}return[]}getOpenRect(e,t){let s=this.openRects.length;for(;s--;){let i=this.openRects[s];if(e<=i.width&&t<=i.height)return{found:!0,rect:i,index:s,rotated:!1};e<=i.height&&i.width}return{found:!1}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(0);t.default=class{constructor(e,t,s){this.mappedRects={},this.maxAtlasWidth=e,this.maxAtlasHeight=t,this.expectedMinTextureLength=s,this.atlasses=[new i.Atlas(e,t,s)],this.availableAtlasses=[this.atlasses[0]]}getMappedRects(e){return this.atlasses[e].mappedRects}addRect(e,t,s){let i=null;for(let r=0;r<this.availableAtlasses.length;r++){const n=r,a=this.availableAtlasses[r];if(i=a.addRect(e,t,s)){a.hasOpenRects()||(this.availableAtlasses.splice(r,1),r--),this.mappedRects[e]={atlasIndex:n,rect:i};break}}if(!i){const r=this.atlasFactory(),n=this.atlasses.push(r)-1;this.availableAtlasses.push(r),i=r.addRect(e,t,s),this.mappedRects[e]={atlasIndex:n,rect:i}}return this.mappedRects[e]}atlasFactory(){return new i.Atlas(this.maxAtlasWidth,this.maxAtlasHeight,this.expectedMinTextureLength)}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(0);t.default=class extends i.MultiAtlas{constructor(e,t,s,i){super(t,s,i),this.atlasRenderTextures={},this.mappedTextures={},this.renderer=e}addTexture(e,t){const s=new PIXI.Sprite;return this.addSprite(e,s,!0)}addSprite(e,t,s=!1){if(this.mappedTextures[e])return s&&t.destroy({children:!0,texture:!0,baseTexture:!0}),this.mappedTextures[e];const{atlasIndex:i,rect:r}=this.addRect(e,t.width,t.height);i in this.atlasRenderTextures||(this.atlasRenderTextures[i]=PIXI.RenderTexture.create(this.maxAtlasWidth,this.maxAtlasHeight));const n=this.atlasRenderTextures[i];t.position.x=r.x,t.position.y=r.y,this.renderer.render(t,n,!1);const a=new PIXI.Texture(n.baseTexture,new PIXI.Rectangle(r.x,r.y,r.width,r.height));return this.mappedTextures[e]=a,s&&t.destroy({children:!0,texture:!0,baseTexture:!0}),a}}}]);